# Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет 
# самую большую площадь. Напишите функцию 
# find_farthest_orbit(list_of_orbits), которая среди списка орбит 
# планет найдет ту, по которой вращается самая далекая 
# планета. Круговые орбиты не учитывайте: вы знаете, что у 
# вашей звезды таких планет нет, зато искусственные спутники 
# были были запущены на круговые орбиты. Результатом 
# функции должен быть кортеж, содержащий длины полуосей 
# эллипса орбиты самой далекой планеты. Каждая орбита 
# представляет из себя кортеж из пары чисел - полуосей ее 
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, 
# где a и b - длины полуосей эллипса. При решении задачи 
# используйте списочные выражения. Подсказка: проще всего 
# будет найти эллипс в два шага: сначала вычислить самую 
# большую площадь эллипса, а затем найти и сам эллипс, 
# имеющий такую площадь. Гарантируется, что самая далекая 
# планета ровно одна

import random

# генерация рандомных пар чисел (1 - длина орбиты, 2 - ширина)
def gen_orbit(min_value, max_value):

    # генерация параметров орбиты
    orbit_tuple = (random.randrange(min_value, max_value) + random.randrange(10) / 10,  # длина орбиты
                   random.randrange(min_value, max_value) + random.randrange(10) / 10)  # ширина орбиты
    return orbit_tuple

# список полученных рандомных орбит
list_of_orbits = list(gen_orbit(0, 10) for _ in range(10))

# функция поиска самой большой орбиты
def find_farthest_orbit(list_of_orbits):
    result_list = [] # сюда записываем все пары неодинаковых значений орбит
    answer = () # сюда записываем ответ в виде кортежа значений длины и ширины орбиты

    # цикл создания нового списка орбит (без одинаковых значений кортежа)
    for i in range(len(list_of_orbits)):
        temp = tuple(list_of_orbits[i]) # переменная, в которую записываем значение i списка (т.е. i-тый кортеж)

        # проверяем первый и второй элемент кортежа i
        if temp[0] != temp[1]:
            result_list.append(list_of_orbits[i])

    min_planet_tuple = tuple(list_of_orbits[0])
    max_orbit = min_planet_tuple[0] * min_planet_tuple[1] # по умолчанию самая большая орбита - самая первая в списке
        
    # цикл поиска самой большой орбиты
    for i in range(len(result_list)):
        temp = tuple(result_list[i]) # переменная, в которую записываем значение i списка (т.е. i-тый кортеж)
        if temp[0] * temp[1] > max_orbit: 
            max_orbit = temp[0] * temp[1]
            answer = (temp[0], temp[1])

    return answer

print(list_of_orbits)
print(result_list_of_orbits := find_farthest_orbit(list_of_orbits))